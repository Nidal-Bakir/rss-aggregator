// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO post (id, title, url, pub_date, description, feed_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	PubDate     sql.NullTime
	Description string
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.PubDate,
		arg.Description,
		arg.FeedID,
	)
	return err
}

const getPostsForFollowedFeed = `-- name: GetPostsForFollowedFeed :many
SELECT post.id, post.created_at, post.updated_at, post.title, post.url, post.pub_date, post.description, post.feed_id
FROM post
    JOIN feed_follow ON post.feed_id = feed_follow.feed_id
WHERE feed_follow.user_id = $1
ORDER BY pub_date DESC OFFSET $2
LIMIT $3
`

type GetPostsForFollowedFeedParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) GetPostsForFollowedFeed(ctx context.Context, arg GetPostsForFollowedFeedParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFollowedFeed, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.PubDate,
			&i.Description,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
